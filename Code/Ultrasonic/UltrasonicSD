/*
  SD card read/write
 
 This example shows how to read and write data to and from an SD card file 	
 The circuit:
 * SD card attached to SPI bus as follows:
 ** MOSI - pin 11
 ** MISO - pin 12
 ** CLK - pin 13
 ** CS - pin 4
 This example code is in the public domain.
 	 
 */
 
#include <SD.h>
#include <Ultrasonic.h>
#include <Servo.h>
#include <SPI.h>
File myFile;
Servo myservo;  // create servo object to control a servo
//int ultraIn = 8;
//int ultraOut = 7;
//Ultrasonic ultrasonic(ultraIn, ultraOut);
int p = 13;
int pos = 0;    // variable to store the servo position
int value = 0;
Ultrasonic ultrasonic(8, 7);
//int servoPin = 9;
;
int x = 0;
int y = 0;
void setup()
{
 // Open serial communications and wait for port to open:
  pinMode(p, INPUT);  
  pinMode(1,INPUT);
  
myservo.attach(5);
  Serial.begin(9600);
  
   while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }


  Serial.print("Initializing SD card...");
  // On the Ethernet Shield, CS is pin 4. It's set as an output by default.
  // Note that even if it's not used as the CS pin, the hardware SS pin 
  // (10 on most Arduino boards, 53 on the Mega) must be left as an output 
  // or the SD library functions will not work. 
   pinMode(10, OUTPUT);
   
  if (!SD.begin(4)) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization done.");
  
  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  myFile = SD.open("test.txt", FILE_WRITE);
  
  // if the file opened okay, write to it:
  if (myFile) {
    Serial.print("Writing to test.txt...");
    
    
     for (pos = 0; pos <= 180; pos += 5) // goes from 0 degrees to 180 degrees
  { // in steps of 1 degree
    myservo.write(pos);     // tell servo to go to position in variable 'pos'
    delay(2500);

    double reading = ultrasonic.Ranging(INC);

    if (pos > 90)
    {
      y = reading * abs(sin(pos));    //sets y coordinate
      x = reading * abs(cos(pos)) ;    //sets x coordinate
    }
    else if (pos < 90)
    {
      y = reading * abs(sin(pos));    //sets y coordinate
      reading = reading * -1;    // negates reading to provide negative x coordinates
      x = reading * abs(cos(pos));    //sets x coordinate
    }
    else if (pos == 90)
    {
      y = reading;
      x = 0;
    }
     
    //Serial.print(pos);
    //Serial.print(",");
    Serial.println(reading);
    Serial.print(x);
    Serial.print(",");
    Serial.println(y);
    myFile.print(x);
    myFile.print(",");
    myFile.println(y);
    
    
  }
   for (pos = 180; pos >= 1; pos -= 1) // goes from 180 degrees to 0 degrees
  {
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
  }
    
    
    
	// close the file:
    myFile.close();
    Serial.println("done.");
  } else {
    // if the file didn't open, print an error:
    Serial.println("error opening test.txt");
  }
  
  // re-open the file for reading:
/*  myFile = SD.open("test.txt");
  if (myFile) {
    Serial.println("test.txt:");
    
    // read from the file until there's nothing else in it:
    while (myFile.available()) {
    	Serial.write(myFile.read());
    }
    // close the file:
    myFile.close();
  } else {
  	// if the file didn't open, print an error:
    Serial.println("error opening test.txt");
  }      */
}

void loop()
{
	// nothing happens after setup
}


